@startuml
interface IReadDao<T>{
    + getById(id: long): T
    + getAll(): List<T>
}
interface IWriteDao<T>{
    + add(entity : T): void
    + remove(entity: T): void
    + update(id: long, entity: T): T
}
interface ICustomDao<T>{
    + search(filterStrategy:FilterStrategyProvider<T>): List<T>
}
interface IBaseReadRepository {
    + getById(id: long): T
    + getAll(): List<T>
}
interface IBaseWriteRepository{
    + add(entity : T): void
    + remove(entity: T): void
    + update(id: long, entity: T): T
}
interface ICustomRepository<T>{
    + search(filterStrategy:FilterStrategyProvider<T>): List<T>
}
class DBReadDao<T> implements IReadDao{
    - connection: Connection
    + DBReadDao()
    + getById(id: long): T
    + getAll(): List<T>
}
class DBWriteDao<T> implements IWriteDao{
    - connection: Connection
    + DBWriteDao()
    + add(entity : T): void
    + remove(entity: T): void
    + update(id: long, entity: T): T
}
class DBCustomDao<T> implements ICustomDao{
    - connection: Connection
    + search(filterStrategy:FilterStrategyProvider<T>): List<T>
}
class BaseReadRepository<T> implements IBaseReadRepository{
    # readDao: IReadDao<T>
    + BaseReadRepository(readDao: IReadDao<T>)
    + getById(id: long): T
    + getAll(): List<T>
}
class BaseWriteRepository<T> implements IBaseWriteRepository{
    # writeDao: IWriteDao<T>
    + BaseWriteRepository(writeDao: IWriteDao<T>)
    + add(entity : T): void
    + remove(entity: T): void
    + update(id: long, entity: T): T
}
class BaseCustomRepository<T> implements ICustomRepository{
    # customDao: ICustomDao
    + search(filterStrategy: FilterStrategyProvider<T>): List<T>
}
'Service will get respective type bounded BaseRepository
'MasterRepository has all read,write,custom repository injection on generic type for scale
'Have some builder pattern around MasterRepository to allow scope of optional repository injection while creation
class MasterRepository<T> implements IBaseReadRepository, IBaseWriteRepository, ICustomRepository{
    # readRepository: IBaseReadRepository<T>
    # writeRepository: IBaseWriteRepository<T>
    # customRepository: ICustomRepository<T>
    + BaseRepository(readRepository: IBaseReadRepository<T>, writeRepository: IBaseWriteRepository<T>, customRepository: ICustomRepository<T>)
    + add(entity: T): void
    + remove((entity: T): void
    + update(id: long, entity: T): T
    + getById(id: long): T
    + getAll(): List<T>
    + search(filterStrategy: FilterStrategyProvider<T>): List<T>
}
class InMemoryMasterRepository<T> extends MasterRepository{
    # list: List<T>
    + InMemoryMasterRepository(readRepository: IBaseReadRepository<T>, writeRepository: IBaseWriteRepository<T>, customRepository: ICustomRepository<T>)
}
class MasterService<T>{
    # masterRepository: MasterRepository<T>
    + MasterService(masterRepository: MasterRepository<T>)
    + add(entity: T): void
    + remove(entity: T): void
    + update(id: long, entity: T): T
    + getById(id: long): T
    + getAll(): List<T>
    + search(filterStrategy:FilterStrategyProvider<T>): List<T>
}
'Rest api request handler/controller create service instance (composition) bootstrap phase
class RestController {
    # masterUserService: MasterService<User>
    + RestController()
}
class User{
    - id: long
    - name: String
    + User(id: long, name: String)
    + getId(): long
    + getName(): String
}

RestController *-- "1..1" MasterService : composition
MasterService o-- "1..1" MasterRepository : aggregation
BaseReadRepository o-- "1..1" IReadDao : aggregation
BaseWriteRepository o-- "1..1" IWriteDao
BaseCustomRepository o-- "1..1" ICustomDao
'ClassA --> "1..*" ClassB : abc
@enduml